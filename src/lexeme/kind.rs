use super::state::{self, ident, kw, LexemeState};

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum LexemeKind {
    KwVal,
    KwFn,
    KwType,
    KwTag,
    KwMain,
    KwMacro,
    KwImport,
    KwObject,
    IdentVal,
    IdentType,
    IdentTag,
    IdentMacro,
    IdentSubtype,
    OpDecl,
    OpEq,
    OpPlus,
    OpMinus,
    OpStar,
    OpSlash,
    OpCaret,
    OpUScore,
    OpPercent,
    OpAnd,
    OpAndAnd,
    OpOr,
    OpOrOr,
    OpNot,
    OpNotEq,
    OpEqEq,
    OpGt,
    OpGtEq,
    OpLt,
    OpLtEq,
    OpLtLt,
    OpGtGt,
    OpRArw,
    OpFatRArw,
    OpTilde,
    OpJoin,
    OpBSlash,
    OpRange,
    OpCRange,
    OpSpread,
    DelimOParen,
    DelimCParen,
    DelimOBrack,
    DelimCBrack,
    DelimOBrace,
    DelimCBrace,
    LitIntDec,
    LitIntBin,
    LitIntOct,
    LitIntHex,
    LitFlt,
    LitChr,
    LitStr,
    LitAtom,
    PtDot,
    PtComma,
    PtColon,
    PtSemi,
    Ws,
    CommentLine,
    CommentBlock,
}

impl From<LexemeState> for LexemeKind {
    fn from(value: LexemeState) -> Self {
        match value {
            LexemeState::Kw(kw_state) => match kw_state {
                kw::KwState::Val(_) => Self::KwVal,
                kw::KwState::Fn(_) => Self::KwFn,
                kw::KwState::Type(_) => Self::KwType,
                kw::KwState::Tag(_) => Self::KwTag,
                kw::KwState::Main(_) => Self::KwMain,
                kw::KwState::Macro(_) => Self::KwMacro,
                kw::KwState::Import(_) => Self::KwImport,
                kw::KwState::Object(_) => Self::KwObject,
            },
            LexemeState::Ident(ident_state) => match ident_state {
                ident::IdentState::Val(_) => Self::IdentVal,
                ident::IdentState::Type(_) => Self::IdentType,
                ident::IdentState::Tag(_) => Self::IdentTag,
                ident::IdentState::Macro(_) => Self::IdentMacro,
                ident::IdentState::Subtype(_) => Self::IdentSubtype,
            },
            LexemeState::Op(op_state) => match op_state {
                state::op::OpState::Decl(_) => Self::OpDecl,
                state::op::OpState::Eq(_) => Self::OpEq,
                state::op::OpState::Plus(_) => Self::OpPlus,
                state::op::OpState::Minus(_) => Self::OpMinus,
                state::op::OpState::Star(_) => Self::OpStar,
                state::op::OpState::Slash(_) => Self::OpSlash,
                state::op::OpState::Caret(_) => Self::OpCaret,
                state::op::OpState::UScore(_) => Self::OpUScore,
                state::op::OpState::Percent(_) => Self::OpPercent,
                state::op::OpState::And(_) => Self::OpAnd,
                state::op::OpState::AndAnd(_) => Self::OpAndAnd,
                state::op::OpState::Or(_) => Self::OpOr,
                state::op::OpState::OrOr(_) => Self::OpOrOr,
                state::op::OpState::Not(_) => Self::OpNot,
                state::op::OpState::NotEq(_) => Self::OpNotEq,
                state::op::OpState::EqEq(_) => Self::OpEqEq,
                state::op::OpState::Gt(_) => Self::OpGt,
                state::op::OpState::GtEq(_) => Self::OpGtEq,
                state::op::OpState::Lt(_) => Self::OpLt,
                state::op::OpState::LtEq(_) => Self::OpLtEq,
                state::op::OpState::LtLt(_) => Self::OpLtLt,
                state::op::OpState::GtGt(_) => Self::OpGtGt,
                state::op::OpState::RArw(_) => Self::OpRArw,
                state::op::OpState::FatRArw(_) => Self::OpFatRArw,
                state::op::OpState::Tilde(_) => Self::OpTilde,
                state::op::OpState::Join(_) => Self::OpJoin,
                state::op::OpState::BSlash(_) => Self::OpBSlash,
                state::op::OpState::Range(_) => Self::OpRange,
                state::op::OpState::CRange(_) => Self::OpCRange,
                state::op::OpState::Spread(_) => Self::OpSpread,
            },
            LexemeState::Delim(delim_state) => match delim_state {
                state::delim::DelimState::OParen(_) => Self::DelimOParen,
                state::delim::DelimState::CParen(_) => Self::DelimCParen,
                state::delim::DelimState::OBrack(_) => Self::DelimOBrack,
                state::delim::DelimState::CBrack(_) => Self::DelimCBrack,
                state::delim::DelimState::OBrace(_) => Self::DelimOBrace,
                state::delim::DelimState::CBrace(_) => Self::DelimCBrace,
            },
            LexemeState::Lit(lit_state) => match lit_state {
                state::lit::LitState::IntDec(_) => Self::LitIntDec,
                state::lit::LitState::IntBin(_) => Self::LitIntBin,
                state::lit::LitState::IntOct(_) => Self::LitIntOct,
                state::lit::LitState::IntHex(_) => Self::LitIntHex,
                state::lit::LitState::Flt(_) => Self::LitFlt,
                state::lit::LitState::Chr(_) => Self::LitChr,
                state::lit::LitState::Str(_) => Self::LitStr,
                state::lit::LitState::Atom(_) => Self::LitAtom,
            },
            LexemeState::Pt(pt_state) => match pt_state {
                state::pt::PtState::Dot(_) => Self::PtDot,
                state::pt::PtState::Comma(_) => Self::PtComma,
                state::pt::PtState::Colon(_) => Self::PtColon,
                state::pt::PtState::Semi(_) => Self::PtSemi,
            },
            LexemeState::Ws(_) => Self::Ws,
            LexemeState::Comment(comment_state) => match comment_state {
                state::comment::CommentState::Line(_) => Self::CommentLine,
                state::comment::CommentState::Block(_) => Self::CommentBlock,
            },
        }
    }
}